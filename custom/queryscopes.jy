#!/usr/bin/env ../bin/jython_coll

############### Begin Standard Header - Do not add comments here ###############
# 
# File:     %W%
# Version:  %I%
# Modified: %G% %U%
# Build:    %R% %L%
# 
# Licensed Materials - Property of IBM
# 
# Restricted Materials of IBM
# 
# 5724-N55
# 
# (C) COPYRIGHT IBM CORP. 2007.  All Rights Reserved.
# 
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
# 
############################# End Standard Header ##############################

'''
Main comment block, Beginning of Script

SCRIPT OVERVIEW 

queryscopes.jy - This script is used to create
            scope set files from existing scope sets in TADDM

DESCRIPTION:


CAVEATS:

Author:  Mat Davis
         mdavis5@us.ibm.com
         IBM C&SI Lab Services

History:  

    Version 1.0  -- 4/16/14 -- Initial Version

'''

VERSION = "1.00"

# Standard Jython/Python Library Imports

import sys 
import java


# from Java [additional imports - not sure why]...

from java.lang import System
from java.lang import Class
from java.util import Properties
from java.io import FileInputStream
from java.lang import String
from java.lang import Boolean 
from java.lang import Runtime 

# Set the Path information

coll_home = System.getProperty("com.collation.home")
System.setProperty("jython.home",coll_home + "/external/jython-2.1")
System.setProperty("python.home",coll_home + "/external/jython-2.1")

# Setting some stuff to deal with windows
System.setProperty("taddm.dbquery",coll_home + "/bin/dbquery.sh")
System.setProperty("taddm.win.dbquery",coll_home + "/bin/dbquery.bat")
System.setProperty("taddm.win.api",coll_home + "/sdk/bin/api.bat")
System.setProperty("taddm.api",coll_home + "/sdk/bin/api.sh")


jython_home = System.getProperty("jython.home")
sys.path.append(jython_home + "/Lib")
sys.path.append(coll_home + "/lib/sensor-tools")
sys.prefix = jython_home + "/Lib"



# Import the TADDM Java Libraries  [Following Required for api access]
from com.collation.proxy.api.client import *
from com.ibm.cdb.api import ApiFactory
from com.collation.platform.util import ModelFactory
from com.collation.platform.model.discovery.scope import IpAddressScope

# for authentication at the API level
from com.collation.platform.util import Props
from com.collation.platform.security.auth import *
from com.collation.platform.logger import LogFactory
from com.collation.proxy.api.client import *
from com.ibm.cdb.api import ApiFactory

# More Standard Jython/Python Library Imports

import traceback
import string
import re
import jarray
import os
import getopt
import pprint

import org.xml.sax as sax
import org.apache.xerces.parsers.DOMParser as domparser

from java.io import StringReader

# Custom Libraries to import (Need to be in the path)
import sensorhelper
import ext_attr_helper as ea

False = Boolean(0)
True = Boolean(1)

#  We don't want any logging (or anything to show up on the screen right now...

System.setProperty("com.collation.LogFile","rhel_cluster_ext_attrs.log")

global log

log = LogFactory.getLogger("rhel_cluster_ext_attrs")

if re.match("Windows",System.getProperty("os.name")):
    taddm_api = System.getProperty("taddm.win.api")
    dbquery = System.getProperty("taddm.win.dbquery")
else:
    taddm_api = System.getProperty("taddm.api")
    dbquery = System.getProperty("taddm.dbquery")

def usage():
    print >> sys.stderr, ''' \
usage: queryscopes.jy [options]

    Options:
    -u userid       User required to login to TADDM Server
                    Defaults to 'administrator'

    -p password     Password for TADDM Server user
                    Defaults to 'collation'

    -s scopeset     Scope set to query

    -h              print this message

'''

########################
# LogError      Error logger
########################
def LogError(msg):
        log.error(msg)
        (ErrorType, ErrorValue, ErrorTB) = sys.exc_info()
        traceback.print_exc(ErrorTB)

########################
# LogInfo
########################
def LogInfo(msg):
        log.info(msg)

########################
# LogDebug
########################
def LogDebug(msg):
        log.debug(msg)

########################
# GetScope
########################
def GetScope(element):
    try:
        # assume it's an IpAddressScope
        scope = element.getIp()
    except AttributeError:
        try:
            # next try NetworkScope
            scope = element.getIpAddress() + '/' + element.getSubnetMask()
        except AttributeError:
            try:
                # finally IpRangeScope
                scope = element.getStart() + '-' + element.getEnd()
            except AttributeError:
                pass
    return scope
        
#=====================================================================================
#   MAIN 
#=====================================================================================

if __name__ == "__main__":

#
# Handle the options
#
    LogInfo("Using sensorhelper version: " + str(sensorhelper.getVersion()))
    LogInfo("Using ext_attr_helper version: " + str(ea.getVersion()))

    try:    
        opts, args = getopt.getopt(sys.argv[1:], "u:p:hs:", ["help", "scope"])
    except getopt.GetoptError, err:
        # print help information and exit:
        print >> sys.stderr, str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    userid = None
    password = None
    scopeset = None
    for o, a in opts:
        if o == "-u":
            userid = a
        elif o == "-p":
            password = a
        elif o in ("-s", "--scope"):
            scopeset = a
        elif o in ("-h", "--help"):
            usage() 
            sys.exit()
        else:   
            assert False, "unhandled option"

    if scopeset is None:
        print >> sys.stderr, 'Option scopeset (-s) is required'
        usage()
        sys.exit(2)
    
    host = "localhost"       # we default to localhost, it COULD be changed but this script will run ON the TADDM Server

    if userid is None: 
        userid = "administrator"

    if password is None: 
        password = "collation"

    res = CommandLineAuthManager.authorize(userid, password)
    if res == 0 :
        print >> sys.stderr, 'Authentication Failed!!!'
        sys.exit(8);
    else:
        print >> sys.stderr, 'Authentication successful'

    print >> sys.stderr, '**** Querying scope set \'' + scopeset + '\' ****'

    # api = ea.get_taddm_api(host,userid,password)
    conn = ApiFactory.getInstance().getApiConnection(Props.getRmiBindHostname(),-1,None,0)
    sess = ApiFactory.getInstance().getSession(conn, userid, password, ApiSession.DEFAULT_VERSION)
    api = sess.createCMDBApi()

    query = 'select name, elements from Scope where name == \'' + scopeset + '\''
    data = api.executeQuery(query,3,None,None)
    if data.next():
        
        scope = data.getModelObject(3)
        print '#',scope.getName()
        if scope.hasElements():
            for element in scope.getElements():
                scope = GetScope(element)
                excludes = []
                if element.hasExcludes():
                    for exclude in element.getExcludes():
                        excludes.append(GetScope(exclude))
                print scope + ',' + ':'.join([str(e) for e in excludes]) + ',' + element.getName()
        else:
            print >> sys.stderr, 'Scope does not contain any scope elements'
    else:
        print >> sys.stderr, 'Scope not found'
        sys.exit(1)
    sys.exit(0)