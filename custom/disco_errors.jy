#!/usr/bin/env ./../bin/jython_coll_253

############### Begin Standard Header - Do not add comments here ###############
#
# File:     polaris/src/com/collation/tools/diag/exportevents.jy, cmdb12_i18n, taddm_dev
# Version:  1.2
# Modified: 10/11/07 01:29:49
# Build:    1 2
#
# Licensed Materials - Property of IBM
#
# Restricted Materials of IBM
#
# 5724-N55
#
# (C) COPYRIGHT IBM CORP. 2007.  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
############################# End Standard Header ##############################


import sys
import java
import traceback
import re

from com.collation.platform.ip import *
from com.collation.platform.session import *
from com.collation.platform.os import *
from com.collation.platform.util import Props
from com.collation.discover.util import InterMessageUtils
from com.collation.monitor.statemanager import StateChangeEvent
from com.collation.monitor.agent import Severity
from java.lang import *
from java.util import *
from java.io import *

class getEvents:
	def getEvents( self,runId ):
		property = System.getProperty("file.separator");
		events = ArrayList(4);
		fileName = Props.getHome() + property + Props.getDirectoryToStoreEvents() + property + runId + ".ser";
		file = File(fileName);
		if (file.exists()):
			fileInputStream = FileInputStream(fileName);
			ois = java.io.ObjectInputStream(fileInputStream);
			while (1) :
				try:
					event = ois.readObject();
					events.add(event);
				except:
					#print "end of file"
					break
			ois.close();
		else:
			print "RunID:  " + str(runId) + " Not Found!!!"
			System.exit(1)
		return events

	def getRunIDs( self):
		property = System.getProperty("file.separator")
		eventDirectory = Props.getHome() + property + Props.getDirectoryToStoreEvents() + property
		idList = []
		#print "Possible RunIDs: "
		for f in java.io.File(eventDirectory).listFiles():
			#print str(f)
			run_id = str(f.getName()).split(".")[0]
			idList.append(run_id)

		return  idList

	def getLatestID(self):
		RunIDs = self.getRunIDs() 
		RunIDs.sort()
		id = RunIDs.pop()
		return id

	def printRunIDs(self):
		# place the Highest Number in first
		RunIDs = self.getRunIDs()
		RunIDs.sort()
		print "Listing available RunIDs"
		for id in RunIDs:
			print "    " + str(id)
		return
		
def getDescription( event ):
	try:
		desc = event.getDescription()
	except:
		eventString = event.toString()
		parts=eventString.split(";")
		subparts=parts[7].split("!")
		partsToChange = []
		i = 0
		for subpart in subparts:
			if (subpart.find(".R.") > -1):
				partsToChange.append(i-2)
			i = i + 1
		i = 0
		newDescription = "";
		for subpart in subparts:
			if ( i > 0 ):
				newDescription = newDescription + "!"
			if ( i in partsToChange ):
				newDescription = newDescription + "com.collation.discover.result.messages.DiscoverResultLocalizedMessages"
			else:
				newDescription = newDescription + subpart
			i = i + 1

		try:
			desc = InterMessageUtils.getMessage(newDescription)
		except:
			import sys
			print 'uncaught exception', sys.exc_type, sys.exc_value, sys.exc_traceback
			desc = "Unknown"
	return desc

def getSeverity( event ):
	try:
		severity = Severity.getDescription( event.getNewSeverity() )
	except:
		severity = "Unknown"
	return severity

def getName( event ):
	try:
		name = event.getAttributeName()
	except:
		name = "Unknown"
	return name

def getSensor( event ):
	try:
		name = event.getAttributeName()
		sensor = name.split('(')[0]
	except:
		sensor = "Unknown"
	return sensor

def getHostName( event ):
	try:
		hostname = event.getDetails().getHostName()
	except:
		hostname = "Unknown"
	return hostname

def getIp( event ):
	try:
		name = event.getAttributeName()
		ip = re.findall( r'[0-9]+(?:\.[0-9]+){3}', name )[0]
	except:
		ip = "Unknown"
	return ip

def usage():
    print """ \

Usage : exportevents.jy [list|latest|RunID]

This program converts the discovery events to a CSV format.
This needs a run id (unique id for a discovery) as an argument.

Arguments:

list  -- List available RunIds from the dist/events directory

latest -- Use the 'latest' RunID from the dist/events directory

RunID --  A specific RunID. (use 'list' to see what's available)  
"""

if __name__=='__main__':
	
	try:

		if sys.argv[1] == "list":
			t = getEvents()
			t.printRunIDs()
			System.exit(1)
		elif sys.argv[1] == "latest":
			t = getEvents()
			RunID = t.getLatestID()
		elif sys.argv[1]:
			# if its anything else, we call it TRUE...
			RunID = sys.argv[1]
			t = getEvents()
		else:
			usage()
			System.exit(1)
	except:
			usage()
			System.exit(1)

	### add strings to ignore here
	ignore = ['This could be due to the aggrFlexvollist being truncated at 1024 chars', 'The server is unable to get the value of windir environment variable', 'CTJTD0213W The following path is not valid: $CATALINA_HOME/conf/server.xml','CTJTD0224W The following file cannot be read: /etc/snmpd.trap']

	s = t.getEvents( RunID )
	it = s.iterator()
	good = {}
	bad = {}
	indifferent = {}
	# iterate over all events and sort into good, bad, indifferent
	while it.hasNext() :
		event= it.next()
		
		severity = getSeverity( event )
		name = getName( event )
		sensor = getSensor( event )
		ip = getIp( event )
		host = getHostName( event ) # this will be the IP/hostname for discover details
		dt = Date( event.getTimeStamp() )
		desc = getDescription( event )
		if desc != None:
			desc = desc.replace('\n', ' ')
		
		# tuple with all values 
		t = host, sensor, severity, name, dt, desc, ip

		if severity == 'minor' or severity == 'normal':
			# check if good event was already added for ip/sensor combo
			if good.has_key(name):
				# replace old event with newer event (like discovery UI does)
				if good[name][4].before(dt):
					#print 'replacing good...'
					#print good[name]
					#print 'with newer good...'
					#print t
					good[name] = t
				#else:
					#print 'skipping good...'
					#print t
			else:
				good[name] = t
		elif severity == 'info':
			#if indifferent.has_key(name):
			#    print 'indifferent key exists: ' + name
			indifferent[name] = t
			#print 'indifferent...'
			#print t
		elif severity == 'critical' or severity == 'major':
			# check if bad event was already added for ip/sensor combo
			if bad.has_key(name):
				# replace old event with newer event (like discovery UI does)
				if bad[name][4].before(dt):
					#print 'replacing bad...'
					#print bad[name]
					#print 'with newer bad...'
					#print t
					bad[name] = t
				#else:
					#print 'skipping bad...'
					#print t
			else:
				bad[name] = t
		else:
			print "UNKNOWN EVENT TYPE FOUND..."
			print t

	# iterate over all bad events, sort by IP before iteration
	keylist = bad.keys()
	keylist.sort()
	for k in keylist:
		# get value for key
		v = bad[k]
		sensor = v[1]
		host = v[0]
		#severity = v[2]
		# skip session sensor failures where snmpmib2 was successful
		if sensor == 'SessionSensor' and severity == 'critical' and good.has_key('SnmpMib2Sensor(' + ip + ')'):
			#print 'found good snmp for bad session...'
			#print good['SnmpMib2Sensor(' + ip + ')']
			continue
		name = v[3]
		dt = v[4]
		desc = v[5]
		ip = v[6]
		#s = '\"' + sensor + '\",\"' + host + '\",\"' + dt.toString() + '\",\"' + name + '\",\"' + severity + '\",\"' + desc + '\"'
		s = '\"' + host + '\",\"' + ip + '\",\"' + dt.toString() + '\",\"' + name + '\",\"' + desc + '\"'
		found = 0
		# iterate over strings to ignore and check output string
		for i in ignore:
			if s.find(i) != -1:
				found = 1
		# only print if no match for any ignore strings
		if found == 0:
			print s