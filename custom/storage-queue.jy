#!/usr/bin/env ./../bin/jython_coll_253

############### Begin Standard Header - Do not add comments here ###############
#
# File:     storage-queue.jy
# Version:  1.0
# Modified: 5/31/13
#
# Licensed Materials - Property of IBM
#
# Restricted Materials of IBM
#
# 5724-N55
#
# (C) COPYRIGHT IBM CORP. 2007.  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
############################# End Standard Header ##############################

import sys
import java
import traceback

from com.collation.platform.util import Props
from com.collation.discover.util import InterMessageUtils
from java.lang import *
from java.util import *
from java.io import *

class getEvents:
	def getEvents( self,runId ):
		property = System.getProperty("file.separator");
		events = ArrayList(4);
		fileName = Props.getHome() + property + Props.getDirectoryToStoreEvents() + property + runId + ".ser";
		file = File(fileName);
		if (file.exists()):
			fileInputStream = FileInputStream(fileName);
			ois = ObjectInputStream(fileInputStream);
			while (1) :
				try:
					event = ois.readObject();
					events.add(event);
				except:
					#print "end of file"
					break
			ois.close();
		else:
			print "RunID:  " + str(runId) + " Not Found!!!"
			System.exit(1)
		return events

	def getRunIDs( self):
		property = System.getProperty("file.separator")
		eventDirectory = Props.getHome() + property + Props.getDirectoryToStoreEvents() + property
		idList = []
		#print "Possible RunIDs: "
		for f in java.io.File(eventDirectory).listFiles():
			#print str(f)
			run_id = str(f.getName()).split(".")[0]
			idList.append(run_id)

		return  idList

	def getLatestID(self):
		RunIDs = self.getRunIDs() 
		RunIDs.sort()
		id = RunIDs.pop()
		return id

	def printRunIDs(self):
		# place the Highest Number in first
		RunIDs = self.getRunIDs()
		RunIDs.sort()
		print "Listing available RunIDs"
		for id in RunIDs:
			print "    " + str(id)
		return
		
def getDescription( event ):
	try:
		desc = event.getDescription()
	except:
		eventString = event.toString()
		parts=eventString.split(";")
		subparts=parts[7].split("!")
		partsToChange = []
		i = 0
		for subpart in subparts:
			if (subpart.find(".R.") > -1):
				partsToChange.append(i-2)
			i = i + 1
		i = 0
		newDescription = "";
		for subpart in subparts:
			if ( i > 0 ):
				newDescription = newDescription + "!"
			if ( i in partsToChange ):
				newDescription = newDescription + "com.collation.discover.result.messages.DiscoverResultLocalizedMessages"
			else:
				newDescription = newDescription + subpart
			i = i + 1

		try:
			desc = InterMessageUtils.getMessage(newDescription)
		except:
			import sys
			print 'uncaught exception', sys.exc_type, sys.exc_value, sys.exc_traceback
			desc = "Unknown"
	return desc

def getName( event ):
	try:
		name = event.getAttributeName()
	except:
		name = "Unknown"
	return name

def getSensor( event ):
	try:
		name = event.getAttributeName()
		sensor = name.split('(')[0]
	except:
		sensor = "Unknown"
	return sensor

def convertMilliToString( millis ):
	hours, ms = divmod(millis, 3600000)
	min, ms = divmod(millis, 60000)
	sec = float(millis) / 1000
	sec = sec - (min * 60)
	min = min - (hours * 60)
	return "%i:%02i:%06.3f" % (hours, min, sec)
		
def usage():
    print """ \

Usage : storage-queue.jy [list|latest|RunID]

This program displays summary information about storage queue time for a discovery run.
This needs a run id (unique id for a discovery) as an argument.

Arguments:

list  -- List available RunIds from the dist/events directory

latest -- Use the 'latest' RunID from the dist/events directory

RunID --  A specific RunID. (use 'list' to see what's available)  
"""

if __name__=='__main__':
	
	try:

		if sys.argv[1] == "list":
			t = getEvents()
			t.printRunIDs()
			System.exit(1)
		elif sys.argv[1] == "latest":
			t = getEvents()
			RunID = t.getLatestID()
		elif sys.argv[1]:
			# if its anything else, we call it TRUE...
			RunID = sys.argv[1]
			t = getEvents()
		else:
			usage()
			System.exit(1)
	except:
			usage()
			System.exit(1)

	s = t.getEvents( RunID )
	it = s.iterator()
	bysensor = {}
	totals = {}
	numsensors = {}
	total = 0
	# iterate over all events and look for storage events
	while it.hasNext() :
		event= it.next()
		
		sensor = getSensor( event )
		name = getName( event )
		dt = event.getTimeStamp()
		desc = getDescription( event )
		if desc != None:
			desc = desc.replace('\n', ' ')
		
		if desc.startswith('Storing ') or desc.startswith('Discovered: '):
			
			# debugging
			s = '\"' + str(dt) + '\",\"' + name + '\",\"' + desc + '\"'
			#print s
			
			if bysensor.has_key(name):
				# this should be the "storing" desc
				storing = bysensor[name]
                
				# update storage queue totals    
				if totals.has_key(sensor):
					totals[sensor] = totals[sensor] + (dt - storing)
				else:
					totals[sensor] = dt - storing

				# update number of sensors    
				if numsensors.has_key(sensor):
					numsensors[sensor] = numsensors[sensor] + 1
				else:
					numsensors[sensor] = 1
                    
				del bysensor[name] # clear out this sensor in case it stores something else
				#print 'calculated storage time for ' + sensor + ' to be ' + str(totals[sensor])
			else:
				# this should be the "Discovered" desc
				bysensor[name] = dt

    # verify bysensor is empty here as a test
    
	# print header
	print 'Sensor,Instances,Total(ms),Total(hr:min:sec.ms),Average(ms),Average(hr:min:sec.ms)'

	# iterate over results and print summaries
	keylist = totals.keys()
	keylist.sort()
	for k in keylist:
		# get value for key
		v = totals[k]
		n = numsensors[k]
		avg = v/n
		print k + ',' + str(n) + ',' + str(v) + ',' + convertMilliToString(v) + ',' + str(avg) + ',' + convertMilliToString(avg)

